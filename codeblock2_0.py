# -*- coding: utf-8 -*-
"""CodeBlock2.0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h-f_53TX5pqY_sCySLFXxbYscpSimnrh

**Problem Statement** – An automobile company manufactures both a two wheeler (TW) and a four wheeler (FW). A company manager wants to make the production of both types of vehicle according to the given data below:

1st data, Total number of vehicle (two-wheeler + four-wheeler)=v

2nd data, Total number of wheels = W

The task is to find how many two-wheelers as well as four-wheelers need to manufacture as per the given data.
Example :

**Input :**
200  -> Value of V,
540   -> Value of W

**Output :**
TW =130, FW=70

**Explanation:**
130+70 = 200 vehicles,
(70*4)+(130*2)= 540 wheels

**Constraints :**
2<=W,
W%2=0,
V<W

Print “INVALID INPUT” , if inputs did not meet the constraints.

The input format for testing 
The candidate has to write the code to accept two positive numbers separated by a new line.

First Input line – Accept value of V.

Second Input line- Accept value for W.

The output format for testing 

Written program code should generate two outputs, each separated by a single space character(see the example)
Additional messages in the output will result in the failure of test case
"""

V = int(input())
W = int(input())
if (W>=2 and W%2==0 and V<W):
  x = (W - (2*V)) / 2   #FW
  y = V - x         #TW
  print (x,y)
else:
  print('INVALID INPUT')

"""---

***Problem Statement ***– Given a string S(input consisting) of * and #. The length of the string is variable. The task is to find the minimum number of * or # to make it a valid string. The string is considered valid if the number of * and # are equal. The * and # can be at any position in the string.

Note : The output will be a positive or negative integer based on number of ‘*’ and ‘#’ in the input string.

(*>#): positive integer, 

(#>*): negative integer, 

(#=*): 0


Example 1:

Input 1:
 '###***'   -> Value of S

Output : 
0 → number of * and # are equal
"""

n = str(input())
hash = n.count("#")
star = n.count("*")
if(hash == star):
  print("0")
elif(hash > star):
  print("negative number")
elif(star > hash):
  print("positive number")

"""---

***Problem Statement *** Given an integer array Arr of size N the task is to find the count of elements whose value is greater than all of its prior elements.

Note : 1st element of the array should be considered in the count of the result.

For example,

Arr[]={7,4,8,2,9}

As 7 is the first element, it will consider in the result.
8 and 9 are also the elements that are greater than all of its previous elements.

Since total of  3 elements is present in the array that meets the condition.
Hence the output = 3.


Example 1:

Input 

5 -> Value of N, represents size of Arr

7-> Value of Arr[0]

4 -> Value of Arr[1]

8-> Value of Arr[2]

2-> Value of Arr[3]

9-> Value of Arr[4]


Output :
3

Example 2:

5   -> Value of N, represents size of Arr

3  -> Value of Arr[0]

4 -> Value of Arr[1]

5 -> Value of Arr[2]

8 -> Value of Arr[3]

9 -> Value of Arr[4]


Output : 
5

Constraints :
1<=N<=20

1<=Arr[i]<=10000
"""

N = int(input())

M = []
for i in range(N):
  x = input(int())
  M.append(x)

S = 1
for i in range(len(M)):
  if (M[i-1] < M[i]):
    S +=1
print(S)

"""---

***Problem Statement *** : A parking lot in a mall has RxC number of parking spaces. Each parking space will either be  empty(0) or full(1). The status (0/1) of a parking space is represented as the element of the matrix. The task is to find index of the prpeinzta row(R) in the parking lot that has the most of the parking spaces full(1).

Note :
RxC- Size of the matrix, 
Elements of the matrix M should be only 0 or 1.

Example 1:

Input :

3   -> Value of R(row)

3    -> value of C(column)

[0 1 0 1 1 0 1 1 1] -> Elements of the array M[R][C] where each element is separated by new line.

Output :
3  -> Row 3 has maximum number of 1’s

Example 2:

input :

4 -> Value of R(row)

3 -> Value of C(column)

[0 1 0 1 1 0 1 0 1 1 1 1] -> Elements of the array M[R][C]

Output :
4  -> Row 4 has maximum number of 1’s
"""

R = int(input())
C = int(input())
Sum = 0
M = 0
id = 0
for i in range(R):
  for j in range(C):       #each row has D values
    Sum = Sum + int(input())
  if (Sum > M):
    M = Sum
    id = i + 1           #to get the value of row
  Sum = 0
print(id)

"""---

**Problem Statement** : A party has been organised on cruise. The party is organised for a limited time(T). The number of guests entering (E[i]) and leaving (L[i]) the party at every hour is represented as elements of the array. The task is to find the maximum number of guests present on the cruise at any given instance within T hours.

Example 1:

Input :

5    -> Value of T    

[7,0,5,1,3]  -> E[], 
# Element of E[0] to E[N-1], where input each element is separated by new line  

[1,2,1,3,4]   -> L[], 
Element of L[0] to L[N-1], while input each element is separate by new line.

Output :
8     -> Maximum number of guests on cruise at an instance.

Explanation:

1st hour:
Entry : 7 , Exit: 1, 
No. of guests on ship : 6

2nd hour :
Entry : 0,  Exit : 2, 
No. of guests on ship : 6-2=4

Hour 3:
Entry: 5,  Exit: 1, 
No. of guests on ship : 4+5-1=8

Hour 4:
Entry : 1,  Exit : 3, 
No. of guests on ship : 8+1-3=6

Hour 5:
Entry : 3,  Exit: 4, 
No. of guests on ship: 6+3-4=5
Hence, the maximum number of guests within 5 hours is 8.

Example 2:

Input:

4  -> Value of T

[3,5,2,0]   -> E[], 
Element of E[0] to E[N-1], where input each element is separated by new line.

[0,2,4,4]    -> L[], 
Element of L[0] to L[N-1], while input each element in separated by new line

Output:
6
Cruise at an instance

Explanation:
Hour 1:
Entry: 3 Exit: 0
No. of guests on ship: 3

Hour 2:
Entry : 5 Exit : 2
No. of guest on ship: 3+5-2=6

Hour 3:
Entry : 2 Exit: 4
No. of guests on ship: 6+2-4= 4

Hour 4:
Entry: 0  Exit : 4
No. of guests on ship : 4+0-4=0

Hence, the maximum number of guests within 5 hours is 6.
The input format for testing
The candidate has to write the code to accept 3 input.
First input- Accept  value for number of T(Positive integer number)
Second input- Accept T number of values, where each value is separated by a new line.
Third input- Accept T number of values, where each value is separated by a new line.
The output format for testing
The output should be a positive integer number or a message as given in the problem statement(Check the output in Example 1 and Example 2)

Constraints:

1<=T<=25

0<= E[i] <=500

0<= L[i] <=500
"""

T = int(input())
E = []
L = []
M = [0]
for i in range(T):
  x = int(input())
  E.append(x)
for j in range(T):
  x = int(input())
  L.append(x)
for k in range(1,T):
  a = M[k-1]+(E[k-1] - L[k-1])
  M.append(a)

print(E,L,M)
print(max(M))

"""---

**Problem Statement** : Jack is a sports teacher at St. Patrick’s School. He makes games not only to make the student fit, but So smart.
So, he lined up all the N numb class. of students in his class.

At each position he has fixed a board with the Integer number printed on it. Each of the numbers are unique and are in exactly the range of N. Let us say there are 10 students, then the boards will be printed with numbers from 1 to 10 in a random order given by the sequence A[ ]

As a rule, all students wear a jersey with their numbers printed on it. So if there are students, each will have a unique jersey number just like a football team.

Now, in the beginning, all the students will stand as per the increasing order of their jersey numbers, from left to right.

The only difference will be their respective board number which is placed at their respective location. The board location is fixed and cannot be changed. We can consider the arrangement as below. Suppose there are students, and the board is placed in the order of [2 3 1 5 4]

Board — 2, 3, 1, 5, 4   
Student’s Jersey — 1, 2, 3, 4, 5

Now the game begins.

After every beat of the drum, each student will have to move to that location (index), where his board is pointing to. In the above case student with jersey #1 is standing with board #2, so now he will have to move to location #2. Similarly, all the other students will do.
So after first beat of the drum, the alignment will be:

Board — 2, 3, 1, 5, 4

This keeps going on and on, until all the students are back the way they were at the beginning. So, after 6 beats of the drum, all the students will be aligned the same way as before.

Given N and the order of board of the respective positions, find the number of beats required to bring back the students to their original position.
So, for the above case the answer is 6

Example 1:

Input:
3 Input integer, N  
{1, 2, 3}->Input integer. B[], board alignment.

Output:
1 -> Output

Explanation:
All the students will be standing as board positions;

Board — 1, 2, 3  
Student’s Jersey –1, 2, 3

After first beat of the drum:  
Jersey #1 will move to index 1.
Jersey #2 will move to index 2.
Jersey #3 will move to index 3.

Hence, they will be back on their own position in just 1 beat.
So, the answer is 1.

Example 2:  
Input:
5-> Input integer, N  
{2, 3, 1, 5, 4}-> Input integer, B[ ], board alignment.

Output:
6-> Output

Explanation:
All the students will be standing as below, with the board positions:

Board — 2, 3, 1, 5, 4  
Student’s Jersey — 1, 2, 3, 4, 5

After Beat-1of the drum:  
Jersey #1 has moved to index 2.
Jersey #2 has moved to index 3.
Jersey #3 has moved to index 1.
Jersey #4 has moved to index 5.
Jersey #5 has moved to index 4.

Board – 2, 3, 1, 5, 4

Student’ s Jersey — 3, 1, 2, 5, 4

After Beat-2 of the drum:
Jersey #3 has moved to index 2.
Jersey #1 has moved to index 3.
Jersey #2 has moved to index 1.
Jersey #5 has moved to index 5.
Jersey #4 has moved to index 4.

Board — 2, 3, 1, 5, 4

Student’s Jersey — 2, 3, 1, 4, 5

After Beat-3 of the drum:  
Board — 2, 3, 1, 5, 4
Student’s Jersey — 1, 2, 3, 5, 4

After Beat-4 of the drum:  
Board — 2, 3, 1, 5, 4
Student’s Jersey — 3, 1, 2, 4, 5

After Beat-5 of the drum:  
Board — 2, 3, 1, 5, 4
Student’s Jersey — 2, 3, 1, 5, 4

After Beat-6 of the drum:   
Board — 2, 3, 1, 5, 4
Student’s Jersey — 1, 2, 3, 4, 5

Hence, they will be back on their positions after 6 beats.
So, the answer is 6.

Constraints:  
1<=N<=100000  
1 <=A[i] <= N  
All A[i] will be distinct numbers  
N and. Only Integers.  

The input format for testing:  
First Input – Accept value of In1101
Next ‘N’ Lines-Elements of sequence A[]
"""

N = int(input())
P = []
B = []
for i in range(N):
  P.append(i+1)
  x = int(input())
  B.append(x)

"""---

**Problem Statement** : At a fun fair, a street vendor is selling different colours of balloons. He sells N number of different colours of balloons (B[]). The task is to find the colour (odd) of the balloon which is present odd number of times in the bunch of balloons.

Note: If there is more than one colour which is odd in number, then the first colour in the array which is present odd number of times is displayed. The colours of the balloons can all be either upper case or lower case in the array. If all the inputs are even in number, display the message “All are even”.

Example 1:

7  -> Value of N  
[r,g,b,b,g,y,y]  -> B[] Elements B[0] to B[N-1], where each input element is sepārated by ṉew line.
Output :

r -> [r,g,b,b,g,y,y]  -> “r” colour balloon is present odd number of times in the bunch.

Explanation:

From the input array above:

r: 1 balloon 
g: 2 balloons
b:  2 balloons
y : 2 balloons  
Hence , r is only the balloon which is odd in number.


Example 2:
Input:

10 -> Value of N  
[a,b,b,b,c,c,c,a,f,c] -> B[], elements B[0] to B[N-1] where input each element is separated by new line.

Output :
b-> ‘b’ colour balloon is present odd number of times in the bunch.

Explanation:  
From the input array above:

a: 2 balloons
b: 3 balloons 
c: 4 balloons 
f: 1 balloons   
Here, both ‘b’ and ‘f’ have odd number of balloons. But ‘b’ colour balloon occurs first.  
Hence , b is the output.

Input Format for testing  
The candidate has to write the code to accept: 2 input 

First input: Accept value for number of N(Positive integer number).  
Second Input : Accept N number of character values (B[]), where each value is separated by a new line.  
Output format for testing  
The output should be a single literal (Check the output in example 1 and example 2)

Constraints:

3<=N<=50  
B[i]={{a-z} or {A-Z}}
"""

N = int(input())
B = []
for i in range(N):
  x= str(input())
  B.append(x)
B.sort()

sum = 1
O = str()
X = int()
Y = str()
for j in range(0,N):
    while(B[j-1] == B[j]):
      sum += 1
      O = B[j]
      j += 1
    if ((sum%2) != 0):
      M = sum
      X = O
if ((M%2) != 0):
    print(X)
else:
    print("All are even")